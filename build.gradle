plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.3'
  id 'org.springframework.boot' version '3.1.3'
  id 'com.github.ben-manes.versions' version '0.48.0'
  id 'org.owasp.dependencycheck' version '8.4.0'
  id 'org.sonarqube' version '4.3.1.3277'
  id 'info.solidsoft.pitest' version '1.9.11'
  id 'java'
  id 'jvm-test-suite'
}

group = 'uk.gov.hmcts.reform'
version = '1.0.2'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(Copy).configureEach {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

test {
  failFast = true
}

tasks.register('functional', Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.register('integration', Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

tasks.register('smoke', Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

tasks.register('tests') {
  description = "Runs junit , integration and functional tests"
  dependsOn test, integration, functional
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      excludes = ["com.gargoylesoftware.htmlunit.javascript.host.css.StyleAttributes"]
    }
  }
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

pitest {
  junit5PluginVersion = '0.12'
  targetClasses = ['uk.gov.hmcts.reform.wastandalonetaskbpmn.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.wastandalonetaskbpmn.config.*',
    'uk.gov.hmcts.reform.wastandalonetaskbpmn.Application'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 80
}

project.tasks['pitest'].group = "Verification"


project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: wa-standalone-task-bpmn"
    property "sonar.projectKey", "uk.gov.hmcts.reform:wa-standalone-task-bpmn"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation.asFile.get().path}"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/wastandalonetaskbpmn/config/**," +
      "src/main/java/uk/gov/hmcts/reform/wastandalonetaskbpmn/Application.java"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'

  //CVE Scanning only relevant to production code that is published, not test or other implementations
  scanConfigurations += 'releaseCompileClasspath'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.70'

    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '32.1.2-jre') {
      entry 'guava'
    }

    //CVE-2021-28170
    dependency group: 'org.glassfish', name: 'jakarta.el', version: '4.0.2'

    dependencySet( group: 'org.springframework.security', version: '6.1.4'){
      entry 'spring-boot-starter-security'
      entry 'spring-security-core'
      entry 'spring-security-acl'
      entry 'spring-security-aspects'
      entry 'spring-security-cas'
      entry 'spring-security-config'
      entry 'spring-security-crypto'
      entry 'spring-security-data'
      entry 'spring-security-ldap'
      entry 'spring-security-messaging'
      entry 'spring-security-oauth2-client'
      entry 'spring-security-oauth2-core'
      entry 'spring-security-oauth2-jose'
      entry 'spring-security-oauth2-resource-server'
      entry 'spring-security-openid'
      entry 'spring-security-remoting'
      entry 'spring-security-rsocket'
      entry 'spring-security-saml2-service-provider'
      entry 'spring-security-taglibs'
      entry 'spring-security-test'
      entry 'spring-security-web'
    }

  }
}

repositories {
  mavenLocal()
  maven { url 'https://jitpack.io' }
  mavenCentral()
}

def versions = [
  junit           : '5.10.0',
  junitPlatform   : '1.9.3',
  reformLogging   : '6.0.1',
  springBoot      : '3.1.3',
  springDoc       : '2.2.0',
  camunda         : '7.19.0',
  pitest          : '1.14.0',
  sonarPitest     : '0.5'

]

ext['snakeyaml.version'] = '2.0'
ext['tomcat.version'] = '10.1.13'

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: versions.springBoot

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: versions.springBoot
  implementation group: 'com.google.guava', name: 'guava', version: '32.1.2-jre'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: versions.springDoc

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-web', version: '3.4.17'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.20.0'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.20.0'

  implementation group: 'org.camunda.bpm', name: 'camunda-external-task-client', version: versions.camunda

  testImplementation group: 'org.pitest', name: 'pitest', version: versions.pitest
  testImplementation 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.9.11'

  testImplementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testImplementation("org.junit.vintage:junit-vintage-engine") {
    exclude group: "org.hamcrest", module: "hamcrest-core"
  }
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot

  testImplementation group: 'org.camunda.bpm.dmn', name: 'camunda-engine-dmn', version: versions.camunda
  testImplementation group: 'org.camunda.bpm.assert', name: 'camunda-bpm-assert', version: '15.0.0'
  testImplementation group: 'org.camunda.bpm', name: 'camunda-engine', version: versions.camunda
  testImplementation group: 'org.camunda.bpm.extension', name: 'camunda-bpm-junit5', version: '1.1.0'

  testImplementation group: 'com.h2database', name: 'h2', version: '2.2.224'
  integrationTestImplementation "org.junit.vintage:junit-vintage-engine:${versions.junit}"

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath

}

mainClassName = 'uk.gov.hmcts.reform.wastandalonetaskbpmn.Application'

bootJar {
  getArchiveFileName().set(provider {
    'wa-standalone-task-bpmn.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
